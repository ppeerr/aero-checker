buildscript {
    ext.kotlin_version = '1.3.61'
    ext.springBootVersion = '2.0.1.RELEASE'
    repositories {
        mavenCentral()

        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath('org.jetbrains.kotlin:kotlin-allopen:1.3.41')
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

apply plugin: 'kotlin'
//apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'

mainClassName = 'com.per.aero_checker.ApplicationKt'
def webappDir = "$projectDir/src/main/webapp"

defaultTasks 'run'

repositories {
    mavenCentral()
}

run {
    standardInput = System.in
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile 'org.springframework.boot:spring-boot-starter-web:2.0.1.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-actuator:2.0.1.RELEASE'

    compile 'io.springfox:springfox-swagger2:2.7.0'
    compile 'io.springfox:springfox-swagger-ui:2.7.0'

//    kapt "org.springframework.boot:spring-boot-configuration-processor"
    compile "org.springframework.boot:spring-boot-configuration-processor:2.0.1.RELEASE"
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.5")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.5")

    compile 'com.google.guava:guava:18.0'
    compile 'org.springframework:spring-context-support:4.1.7.RELEASE'

    testCompile "org.codehaus.groovy:groovy-all:2.5.7"
    testCompile "org.spockframework:spock-core:1.3-groovy-2.5"
    testCompile 'org.apache.commons:commons-io:1.3.2'
    testRuntime "net.bytebuddy:byte-buddy:1.9.3"
}

sourceSets {
    main {
        kotlin {
            srcDirs = ['src/main/kotlin']
        }
        resources {
            srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
        }
    }
}

processResources {
    dependsOn "buildAngular"
}

jar {
    manifest { attributes 'Main-Class': 'com.per.aero_checker.ApplicationKt' }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

bootJar {
    launchScript()
}

task buildAngular(type:Exec) {
    // installAngular should be run prior to this task
    dependsOn "installAngular"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    // Add task to the standard build group
    group = BasePlugin.BUILD_GROUP
    // ng doesn't exist as a file in windows -> ng.cmd
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
        commandLine "ng.cmd", "build"
    } else {
        commandLine "ng", "build"
    }
}

task installAngular(type:Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}
